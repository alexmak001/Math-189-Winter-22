knitr::opts_chunk$set(echo = TRUE)
data <- read.delim("Places_Rated.txt", header =FALSE, sep = '')
df <- data.frame(data)
names(df) <- c("Climate and Terrain", "Housing",
"Health Care & the Environment", "Crime",
"Transportation", "Education", "The Arts",
"Recreation", "Economics", "index")
standard_df <- scale(df)
standard_cov <- cov(standard_df)
standard_ev <- eigen(standard_cov)
standard_prop <- c()
for ( i in 1:10) {
prop <- (standard_ev$values[i]) / (sum(standard_ev$values))
standard_prop <- append(standard_prop, prop)
}
standard_cprop <- c()
cprop <- 0
for ( i in 1:9) {
cprop <- cprop + standard_prop[i]
standard_cprop <- append(standard_cprop, cprop)
}
plot(standard_prop, xlab="Principal Component",
ylab="Proportion of Variance Explained",
ylim=c(0,1), xaxt="n", type='b', cex=2, pch=20, cex.lab=1.5)
plot(standard_cprop, xlab="Principal Component",
ylab="Cumulative Proportion of Variance Explained",
ylim=c(0,1), xaxt="n", type="b", col="blue", cex=2,
pch=20, cex.lab=1.5)
raw_cov <- cov(df)
raw_ev <- eigen(raw_cov)
raw_prop <- c()
for ( i in 1:10) {
prop <- (raw_ev$values[i]) / (sum(raw_ev$values))
raw_prop <- append(raw_prop, prop)
}
raw_cprop <- cumsum(raw_prop[1:9])
plot(raw_prop, xlab="Principal Component",
ylab="Proportion of Variance Explained", ylim=c(0,1),
xaxt="n", type='b', cex=2, pch=20, cex.lab=1.5)
plot(raw_cprop, xlab="Principal Component",
ylab="Cumulative Proportion of Variance Explained",
ylim=c(0,1), xaxt="n", type="b", col="blue", cex=2,
pch=20, cex.lab=1.5)
library("ggplot2")
library("ggfortify")
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
summary(Weekly)
plot(Weekly$Today, Weekly$Volume)
plot(Weekly$Lag5, Weekly$Today)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket, family = binomial)
summary(glm.fit)
library(ISLR)
library(knitr)
head(Weekly)
knitr::kable(summary(Weekly))
pairs(Weekly[,-9], cex = 0.3)
glm_fits = glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Weekly, family = "binomial")
summary(glm_fits)
Smarket
Smarket
Weekly
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Weekly, family = binomial)
summary(glm.fit)
Probs = predict(glm_fits, type='response')
contrasts(Weekly$Direction)
Pred_trend = ifelse(Probs>0.5, "Up", "Down")
table(Pred_trend, Weekly$Direction) # The row names are predicting labels and the column names are the actual labels
Probs = predict(glm_fits, type='response')
contrasts(Weekly$Direction)
Pred_trend = ifelse(Probs>0.5, "Up", "Down")
table(Pred_trend, Weekly$Direction) # The row names are predicting labels and the column names are the actual labels
Probs = predict(glm.fit, type='response')
contrasts(Weekly$Direction)
Pred_trend = ifelse(Probs>0.5, "Up", "Down")
table(Pred_trend, Weekly$Direction) # The row names are predicting labels and the column names are the actual labels
Probs = predict(glm.fit, type='response')
contrasts(Weekly$Direction)
Pred_trend = ifelse(Probs>0.5, "Up", "Down")
table(Pred_trend, Weekly$Direction) # The row names are predicting labels and the column names are the actual labels
mean(Pred_trend == Weekly$Direction)
Data_train = Weekly[Weekly$Year <= 2008,]
Data_test = Weekly[Weekly$Year > 2008,]
glm_fits2 = glm(Direction ~ Lag2, data = Data_train, family = binomial)
Probs_2 = predict(glm_fits2, Data_test, type = "response")
Pred_trend2 = ifelse(Probs_2>0.5, "Up", "Down")
table(Pred_trend2, Data_test$Direction)
mean(Pred_trend2 == Data_test$Direction)
Probs = predict(glm.fit, type='response')
contrasts(Weekly$Direction)
Pred_trend = ifelse(Probs>0.5, "Up", "Down")
table(Pred_trend, Weekly$Direction)
mean(Pred_trend == Weekly$Direction)
Data_train = Weekly[Weekly$Year <= 2008,]
Data_test = Weekly[Weekly$Year > 2008,]
glm_fits2 = glm(Direction ~ Lag2, data = Data_train, family = binomial)
Probs_2 = predict(glm_fits2, Data_test, type = "response")
Pred_trend2 = ifelse(Probs_2>0.5, "Up", "Down")
table(Pred_trend2, Data_test$Direction)
Data_train = Weekly[Weekly$Year <= 2008,]
Data_test = Weekly[Weekly$Year > 2008,]
glm_fits2 = glm(Direction ~ Lag2, data = Data_train, family = binomial)
Probs_2 = predict(glm_fits2, Data_test, type = "response")
Pred_trend2 = ifelse(Probs_2>0.5, "Up", "Down")
table(Pred_trend2, Data_test$Direction)
Data_train = Weekly[Weekly$Year <= 2008,]
Data_test = Weekly[Weekly$Year > 2008,]
glm_fits2 = glm(Direction ~ Lag2, data = Data_train, family = binomial)
Probs_2 = predict(glm_fits2, Data_test, type = "response")
Pred_trend2 = ifelse(Probs_2>0.5, "Up", "Down")
table(Pred_trend2, Data_test$Direction)
mean(Pred_trend2 == Data_test$Direction)
Data_train = Weekly[Weekly$Year <= 2008,]
Data_test = Weekly[Weekly$Year > 2008,]
glm_fits2 = glm(Direction ~ Lag2, data = Data_train, family = binomial)
Probs_2 = predict(glm_fits2, Data_test, type = "response")
Pred_trend2 = ifelse(Probs_2>0.6, "Up", "Down")
table(Pred_trend2, Data_test$Direction)
mean(Pred_trend2 == Data_test$Direction)
Data_train = Weekly[Weekly$Year <= 2008,]
Data_test = Weekly[Weekly$Year > 2008,]
glm_fits2 = glm(Direction ~ Lag2, data = Data_train, family = binomial)
Probs_2 = predict(glm_fits2, Data_test, type = "response")
Pred_trend2 = ifelse(Probs_2>0.52, "Up", "Down")
table(Pred_trend2, Data_test$Direction)
mean(Pred_trend2 == Data_test$Direction)
Data_train = Weekly[Weekly$Year <= 2008,]
Data_test = Weekly[Weekly$Year > 2008,]
glm_fits2 = glm(Direction ~ Lag2, data = Data_train, family = binomial)
Probs_2 = predict(glm_fits2, Data_test, type = "response")
Pred_trend2 = ifelse(Probs_2>0.51, "Up", "Down")
table(Pred_trend2, Data_test$Direction)
mean(Pred_trend2 == Data_test$Direction)
Data_train = Weekly[Weekly$Year <= 2008,]
Data_test = Weekly[Weekly$Year > 2008,]
glm_fits2 = glm(Direction ~ Lag2, data = Data_train, family = binomial)
Probs_2 = predict(glm_fits2, Data_test, type = "response")
Pred_trend2 = ifelse(Probs_2>0.4, "Up", "Down")
table(Pred_trend2, Data_test$Direction)
mean(Pred_trend2 == Data_test$Direction)
Data_train = Weekly[Weekly$Year <= 2008,]
Data_test = Weekly[Weekly$Year > 2008,]
glm_fits2 = glm(Direction ~ Lag2, data = Data_train, family = binomial)
Probs_2 = predict(glm_fits2, Data_test, type = "response")
Pred_trend2 = ifelse(Probs_2>0.5, "Up", "Down")
table(Pred_trend2, Data_test$Direction)
mean(Pred_trend2 == Data_test$Direction)
library("ggplot2")
install.packages("ggfortify")
library("ggfortify")
pca_result <- prcomp(df[,1:5], scale=TRUE)
pca_result$rotation
autoplot(pca_result, data=df, color='black')
biplot(pca_result, scale=0)
summary(Weekly)
plot(Weekly$Today, Weekly$Volume)
plot(Weekly$Lag5, Weekly$Today)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Weekly, family = binomial)
summary(glm.fit)
Probs = predict(glm.fit, type='response')
contrasts(Weekly$Direction)
Pred_trend = ifelse(Probs>0.5, "Up", "Down")
table(Pred_trend, Weekly$Direction)
mean(Pred_trend == Weekly$Direction)
Data_train = Weekly[Weekly$Year <= 2008,]
Data_test = Weekly[Weekly$Year > 2008,]
glm_fits2 = glm(Direction ~ Lag2, data = Data_train, family = binomial)
Probs_2 = predict(glm_fits2, Data_test, type = "response")
Pred_trend2 = ifelse(Probs_2>0.5, "Up", "Down")
table(Pred_trend2, Data_test$Direction)
mean(Pred_trend2 == Data_test$Direction)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
knitr::opts_chunk$set(echo = TRUE)
