knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
d <- data(Auto)
train = d[1:300,]
cars = transform(Auto, mpg01= ifelse(mpg>median(Auto$mpg), 1, 0))
head(cars)
View(cars)
View(Auto)
train = cars[1:300,]
test = cars[301:392,]
View(test)
View(train)
n_cars <- 300
p_cars <- n_cars/300
############## Calculate sample mean vectors ##############
X1 <- train[1:40,1:4]
View(X1)
n_cars <- 300
p_cars <- n_cars/300
X <- train[1:300, 3:5]
View(X)
train$mpg01
n_cars <-
p_cars <- n_cars/300
X <- train[1:300, 3:5]
mean <- colMeans(X)
table(train$mpg01)
n_cars <-
p_cars <- n_cars/300
X <- train[1:300, 3:5]
mean <- colMeans(X)
n <- table(train$mpg01)
n_0 <- length(which(train$mpg01 == 0))
n_1 <-
p_cars <- n_cars/300
X <- train[1:300, 3:5]
mean <- colMeans(X)
n <- table(train$mpg01)
n_0 <- length(which(train$mpg01 == 0))
n_1 <- length(which(train$mpg01 == 1))
p_0 <- n_0/300
p_1 <- n_1/300
X <- train[1:300, 3:5]
mean <- colMeans(X)
n_0 <- length(which(train$mpg01 == 0))
n_1 <- length(which(train$mpg01 == 1))
p_0 <- n_0/300
p_1 <- n_1/300
X0 <- train[train$mpg01 == 0, 3:5]
X1 <- train[train$mpg01 == 1, 3:5]
mean_0 <- colMeans(X0)
mean_1 <- colMeans(X1)
n_0 <- length(which(train$mpg01 == 0))
n_1 <- length(which(train$mpg01 == 1))
p_0 <- n_0/300
p_1 <- n_1/300
X0 <- train[train$mpg01 == 0, 3:5]
X1 <- train[train$mpg01 == 1, 3:5]
mean_0 <- colMeans(X0)
mean_1 <- colMeans(X1)
s_0 <- cov(X0)
s_1 <- cov(X1)
s_pooled <- ((n_0-1)*s_0 + (n_1-1)*s_1) / (n_0+n_1-2)
s_inv <- solve(s_pooled)
alpha_0 <- -0.5* t(mean_0) %*% s_inv %*% mean_0
alpha_1 <- -0.5* t(mean_1) %*% s_inv %*% mean_1
beta_0 <- s_inv %*% mean_0
beta_1 <- s_inv %*% mean_1
prediction <- c()
d_0vec <- c()
d_1vec <- c()
label <- c("0", "1")
for (i in 1:nrow(test)){
y <- t(test[i, 3:5])
d_0 <- alpha_0 + t(beta_0) %*% y
d_1 <- alpha_1 + t(beta_1) %*% y
d_vec <- c(d_0, d_1)
prediction <- append(prediction, label[which.max( d_vec )])
d_0vec <- append(d_0vec, d_0)
d_1vec <- append(d_1vec, d_1)
}
test$prediction <- prediction
View(test)
n_0 <- length(which(train$mpg01 == 0))
n_1 <- length(which(train$mpg01 == 1))
p_0 <- n_0/300
p_1 <- n_1/300
X0 <- train[train$mpg01 == 0, 3:5]
X1 <- train[train$mpg01 == 1, 3:5]
mean_0 <- colMeans(X0)
mean_1 <- colMeans(X1)
s_0 <- cov(X0)
s_1 <- cov(X1)
s_pooled <- ((n_0-1)*s_0 + (n_1-1)*s_1) / (n_0+n_1-2)
s_inv <- solve(s_pooled)
alpha_0 <- -0.5* t(mean_0) %*% s_inv %*% mean_0
alpha_1 <- -0.5* t(mean_1) %*% s_inv %*% mean_1
beta_0 <- s_inv %*% mean_0
beta_1 <- s_inv %*% mean_1
prediction <- c()
d_0vec <- c()
d_1vec <- c()
label <- c("0", "1")
for (i in 1:nrow(test)){
y <- t(test[i, 3:5])
d_0 <- alpha_0 + t(beta_0) %*% y
d_1 <- alpha_1 + t(beta_1) %*% y
d_vec <- c(d_0, d_1)
prediction <- append(prediction, label[which.max( d_vec )])
d_0vec <- append(d_0vec, d_0)
d_1vec <- append(d_1vec, d_1)
}
test$prediction <- prediction
error <- lwngth(which(test$mpg01 != test$prediction)) / 92
n_0 <- length(which(train$mpg01 == 0))
n_1 <- length(which(train$mpg01 == 1))
p_0 <- n_0/300
p_1 <- n_1/300
X0 <- train[train$mpg01 == 0, 3:5]
X1 <- train[train$mpg01 == 1, 3:5]
mean_0 <- colMeans(X0)
mean_1 <- colMeans(X1)
s_0 <- cov(X0)
s_1 <- cov(X1)
s_pooled <- ((n_0-1)*s_0 + (n_1-1)*s_1) / (n_0+n_1-2)
s_inv <- solve(s_pooled)
alpha_0 <- -0.5* t(mean_0) %*% s_inv %*% mean_0
alpha_1 <- -0.5* t(mean_1) %*% s_inv %*% mean_1
beta_0 <- s_inv %*% mean_0
beta_1 <- s_inv %*% mean_1
prediction <- c()
d_0vec <- c()
d_1vec <- c()
label <- c("0", "1")
for (i in 1:nrow(test)){
y <- t(test[i, 3:5])
d_0 <- alpha_0 + t(beta_0) %*% y
d_1 <- alpha_1 + t(beta_1) %*% y
d_vec <- c(d_0, d_1)
prediction <- append(prediction, label[which.max( d_vec )])
d_0vec <- append(d_0vec, d_0)
d_1vec <- append(d_1vec, d_1)
}
test$prediction <- prediction
error <- length(which(test$mpg01 != test$prediction)) / 92
n_0 <- length(which(train$mpg01 == 0))
n_1 <- length(which(train$mpg01 == 1))
p_0 <- n_0/300
p_1 <- n_1/300
X0 <- train[train$mpg01 == 0, 3:5]
X1 <- train[train$mpg01 == 1, 3:5]
mean_0 <- colMeans(X0)
mean_1 <- colMeans(X1)
s_0 <- cov(X0)
s_1 <- cov(X1)
s_pooled <- ((n_0-1)*s_0 + (n_1-1)*s_1) / (n_0+n_1-2)
s_inv <- solve(s_pooled)
alpha_0 <- -0.5* t(mean_0) %*% s_inv %*% mean_0
alpha_1 <- -0.5* t(mean_1) %*% s_inv %*% mean_1
beta_0 <- s_inv %*% mean_0
beta_1 <- s_inv %*% mean_1
prediction <- c()
d_0vec <- c()
d_1vec <- c()
label <- c("0", "1")
for (i in 1:nrow(test)){
y <- t(test[i, 3:5])
d_0 <- alpha_0 + t(beta_0) %*% y
d_1 <- alpha_1 + t(beta_1) %*% y
d_vec <- c(d_0, d_1)
prediction <- append(prediction, label[which.max( d_vec )])
d_0vec <- append(d_0vec, d_0)
d_1vec <- append(d_1vec, d_1)
}
test$prediction <- prediction
error <- length(which(test$mpg01 != test$prediction)) / 92
test
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
head(Auto)
cars = transform(Auto, mpg01= ifelse(mpg>median(Auto$mpg), 1, 0))
head(cars)
